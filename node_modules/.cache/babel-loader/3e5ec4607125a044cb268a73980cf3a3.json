{"ast":null,"code":"import { rawAsap } from './raw'; // rawAsap provides everything we need except exception management.\n// RawTasks are recycled to reduce GC churn.\n\nvar freeTasks = []; // We queue errors to ensure they are thrown in right order (FIFO).\n// Array-as-queue is good enough here, since we are just dealing with exceptions.\n\nvar pendingErrors = [];\nvar requestErrorThrow = rawAsap.makeRequestCallFromTimer(throwFirstError);\nfunction throwFirstError() {\n  if (pendingErrors.length) {\n    throw pendingErrors.shift();\n  }\n}\n/**\n * Calls a task as soon as possible after returning, in its own event, with priority\n * over other events like animation, reflow, and repaint. An error thrown from an\n * event will not interrupt, nor even substantially slow down the processing of\n * other events, but will be rather postponed to a lower priority event.\n * @param {{call}} task A callable object, typically a function that takes no\n * arguments.\n */\n\nexport function asap(task) {\n  var rawTask;\n  if (freeTasks.length) {\n    rawTask = freeTasks.pop();\n  } else {\n    rawTask = new RawTask();\n  }\n  rawTask.task = task;\n  rawAsap(rawTask);\n} // We wrap tasks with recyclable task objects.  A task object implements\n// `call`, just like a function.\n\nvar RawTask = /** @class */\nfunction () {\n  function RawTask() {}\n  RawTask.prototype.call = function () {\n    try {\n      this.task.call();\n    } catch (error) {\n      if (asap.onerror) {\n        // This hook exists purely for testing purposes.\n        // Its name will be periodically randomized to break any code that\n        // depends on its existence.\n        asap.onerror(error);\n      } else {\n        // In a web browser, exceptions are not fatal. However, to avoid\n        // slowing down the queue of pending tasks, we rethrow the error in a\n        // lower priority turn.\n        pendingErrors.push(error);\n        requestErrorThrow();\n      }\n    } finally {\n      this.task = null;\n      freeTasks[freeTasks.length] = this;\n    }\n  };\n  return RawTask;\n}();","map":{"version":3,"names":["rawAsap","freeTasks","pendingErrors","requestErrorThrow","makeRequestCallFromTimer","throwFirstError","length","shift","asap","task","rawTask","pop","RawTask","prototype","call","error","onerror","push"],"sources":["C:/Users/AD/Desktop/Co-act-main/node_modules/@react-dnd/asap/dist/esm/browser/asap.js"],"sourcesContent":["import { rawAsap } from './raw'; // rawAsap provides everything we need except exception management.\n// RawTasks are recycled to reduce GC churn.\n\nvar freeTasks = []; // We queue errors to ensure they are thrown in right order (FIFO).\n// Array-as-queue is good enough here, since we are just dealing with exceptions.\n\nvar pendingErrors = [];\nvar requestErrorThrow = rawAsap.makeRequestCallFromTimer(throwFirstError);\n\nfunction throwFirstError() {\n  if (pendingErrors.length) {\n    throw pendingErrors.shift();\n  }\n}\n/**\n * Calls a task as soon as possible after returning, in its own event, with priority\n * over other events like animation, reflow, and repaint. An error thrown from an\n * event will not interrupt, nor even substantially slow down the processing of\n * other events, but will be rather postponed to a lower priority event.\n * @param {{call}} task A callable object, typically a function that takes no\n * arguments.\n */\n\n\nexport function asap(task) {\n  var rawTask;\n\n  if (freeTasks.length) {\n    rawTask = freeTasks.pop();\n  } else {\n    rawTask = new RawTask();\n  }\n\n  rawTask.task = task;\n  rawAsap(rawTask);\n} // We wrap tasks with recyclable task objects.  A task object implements\n// `call`, just like a function.\n\nvar RawTask =\n/** @class */\nfunction () {\n  function RawTask() {}\n\n  RawTask.prototype.call = function () {\n    try {\n      this.task.call();\n    } catch (error) {\n      if (asap.onerror) {\n        // This hook exists purely for testing purposes.\n        // Its name will be periodically randomized to break any code that\n        // depends on its existence.\n        asap.onerror(error);\n      } else {\n        // In a web browser, exceptions are not fatal. However, to avoid\n        // slowing down the queue of pending tasks, we rethrow the error in a\n        // lower priority turn.\n        pendingErrors.push(error);\n        requestErrorThrow();\n      }\n    } finally {\n      this.task = null;\n      freeTasks[freeTasks.length] = this;\n    }\n  };\n\n  return RawTask;\n}();"],"mappings":"AAAA,SAASA,OAAO,QAAQ,OAAO,CAAC,CAAC;AACjC;;AAEA,IAAIC,SAAS,GAAG,EAAE,CAAC,CAAC;AACpB;;AAEA,IAAIC,aAAa,GAAG,EAAE;AACtB,IAAIC,iBAAiB,GAAGH,OAAO,CAACI,wBAAwB,CAACC,eAAe,CAAC;AAEzE,SAASA,eAAeA,CAAA,EAAG;EACzB,IAAIH,aAAa,CAACI,MAAM,EAAE;IACxB,MAAMJ,aAAa,CAACK,KAAK,EAAE;EAC7B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,OAAO,SAASC,IAAIA,CAACC,IAAI,EAAE;EACzB,IAAIC,OAAO;EAEX,IAAIT,SAAS,CAACK,MAAM,EAAE;IACpBI,OAAO,GAAGT,SAAS,CAACU,GAAG,EAAE;EAC3B,CAAC,MAAM;IACLD,OAAO,GAAG,IAAIE,OAAO,EAAE;EACzB;EAEAF,OAAO,CAACD,IAAI,GAAGA,IAAI;EACnBT,OAAO,CAACU,OAAO,CAAC;AAClB,CAAC,CAAC;AACF;;AAEA,IAAIE,OAAO,GACX;AACA,YAAY;EACV,SAASA,OAAOA,CAAA,EAAG,CAAC;EAEpBA,OAAO,CAACC,SAAS,CAACC,IAAI,GAAG,YAAY;IACnC,IAAI;MACF,IAAI,CAACL,IAAI,CAACK,IAAI,EAAE;IAClB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACd,IAAIP,IAAI,CAACQ,OAAO,EAAE;QAChB;QACA;QACA;QACAR,IAAI,CAACQ,OAAO,CAACD,KAAK,CAAC;MACrB,CAAC,MAAM;QACL;QACA;QACA;QACAb,aAAa,CAACe,IAAI,CAACF,KAAK,CAAC;QACzBZ,iBAAiB,EAAE;MACrB;IACF,CAAC,SAAS;MACR,IAAI,CAACM,IAAI,GAAG,IAAI;MAChBR,SAAS,CAACA,SAAS,CAACK,MAAM,CAAC,GAAG,IAAI;IACpC;EACF,CAAC;EAED,OAAOM,OAAO;AAChB,CAAC,EAAE"},"metadata":{},"sourceType":"module"}