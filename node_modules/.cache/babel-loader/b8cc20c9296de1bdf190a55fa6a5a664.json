{"ast":null,"code":"var _jsxFileName = \"D:\\\\6th sem\\\\HCI\\\\Co-act-main\\\\Co-act-main\\\\src\\\\components\\\\Task.js\";\nimport React from \"react\";\nimport axios from \"axios\";\nimport { deleteTask } from \"../services/taskServices1\";\nimport { NotificationContainer, NotificationManager } from \"react-notifications\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Task extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      assignedBy: JSON.parse(localStorage.getItem(\"user\")).displayName,\n      uid: JSON.parse(localStorage.getItem(\"user\")).id,\n      cospaceName: localStorage.getItem(\"recent_cospace_clicked\"),\n      task: \"\",\n      taskNotes: \"\",\n      taskStatus: \"Pending\",\n      taskList: []\n    };\n\n    this.compare = (a, b) => {\n      if (a.taskStatus == b.taskStatus) return 0;\n      if (a.taskStatus == \"Completed\") return 1;\n      if (a.taskStatus == \"Pending\") return -1;\n      if (b.taskStatus == \"Completed\") return -1;\n      if (b.taskStatus == \"Pending\") return 1;\n      return 0;\n    };\n\n    this.componentDidMountAsst = async () => {\n      const uid = JSON.parse(localStorage.getItem(\"user\")).id;\n      const currentCospace = localStorage.getItem(\"recent_cospace_clicked\");\n\n      try {\n        const {\n          data\n        } = await this.getTasks();\n        let datas = [];\n        data.forEach(task => {\n          if (task.cospaceName === currentCospace) {\n            datas.push(task);\n          }\n        });\n        datas.sort(this.compare);\n        this.setState({\n          taskList: datas\n        });\n      } catch (error) {\n        console.log(error);\n      }\n    };\n\n    this.getTasks = () => {\n      return axios.get(\"http://localhost:8000/task\");\n    };\n\n    this.handleChange = event => {\n      if (event.target.name === \"taskStatus\") {\n        this.setState({\n          taskStatus: event.target.value\n        });\n      } else {\n        this.setState({\n          [event.target.name]: event.target.value\n        });\n      }\n    };\n\n    this.handleSubmit = e => {\n      e.preventDefault();\n\n      if (this.state.task === \"\" || this.state.taskNotes === \"\") {\n        NotificationManager.warning(\"Please Fill up Required Field. Please Check Task field And Task Notes field\");\n        return false;\n      }\n\n      let data = {\n        assignedBy: this.state.assignedBy,\n        uid: this.state.uid,\n        task: this.state.task,\n        taskNotes: this.state.taskNotes,\n        taskStatus: this.state.taskStatus,\n        cospaceName: this.state.cospaceName\n      };\n      axios.post(\"http://localhost:8000/task/add\", data).then(async res => {\n        NotificationManager.success(\"Task added!\");\n        this.state.task = \"\";\n        this.state.taskNotes = \"\";\n        this.state.taskStatus = \"Pending\";\n        this.componentDidMountAsst();\n      }).catch(error => {\n        if (error.response.status && error.response.status === 400) NotificationManager.error(\"Bad Request\");else NotificationManager.error(\"Something Went Wrong\");\n      });\n    };\n\n    this.handleDelete = async currentTask => {\n      const originalTasks = this.state.taskList;\n\n      try {\n        const taskList = originalTasks.filter(task => task._id !== currentTask);\n        this.setState({\n          taskList\n        });\n        await deleteTask(currentTask);\n        NotificationManager.info(\"Task deleted successfully!!\");\n      } catch (error) {\n        this.setState({\n          taskList: originalTasks\n        });\n        console.log(error);\n      }\n    };\n\n    this.handleTake = async currentTask => {\n      const originalTasks = this.state.taskList;\n\n      try {\n        for (let task of originalTasks) {\n          if (task._id === currentTask) {\n            task.takenBy = this.state.assignedBy;\n            task.taskStatus = \"In Progress\";\n          }\n        }\n\n        this.setState({\n          originalTasks\n        });\n        axios.patch(\"http://localhost:8000/task/take/\" + currentTask, {\n          actor: this.state.assignedBy\n        }).then(() => {\n          NotificationManager.success(\"Task taken successfully!!\");\n        }).catch(() => {\n          NotificationManager.info(\"Something went wrong!!\");\n        });\n      } catch (error) {\n        this.setState({\n          taskList: originalTasks\n        });\n        console.log(error);\n      }\n    };\n\n    this.handleDone = async currentTask => {\n      const originalTasks = this.state.taskList;\n\n      try {\n        for (let task of originalTasks) {\n          if (task._id === currentTask) {\n            task.takenBy = this.state.assignedBy;\n            task.taskStatus = \"Completed\";\n          }\n        }\n\n        this.setState({\n          originalTasks\n        });\n        axios.patch(\"http://localhost:8000/task/done/\" + currentTask).then(() => {\n          NotificationManager.success(\"Task Completed successfully!!\");\n        }).catch(() => {\n          NotificationManager.info(\"Something went wrong!!\");\n        });\n      } catch (error) {\n        this.setState({\n          taskList: originalTasks\n        });\n        console.log(error);\n      }\n    };\n  }\n\n  componentDidMount() {\n    this.componentDidMountAsst();\n  }\n\n  render() {\n    let {\n      taskList\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tasksection\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"noticontainer\",\n        id: \"noticontainer\",\n        children: /*#__PURE__*/_jsxDEV(NotificationContainer, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Tasks\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: localStorage.getItem(\"recent_cospace_clicked_description\")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"addnewtask\",\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: this.handleSubmit,\n          className: \"taskform\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"taskname\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"taskName\",\n              children: /*#__PURE__*/_jsxDEV(\"b\", {\n                children: \"Task Name\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 175,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 174,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              name: \"task\",\n              className: \"taskname\",\n              onChange: this.handleChange,\n              value: this.state.task\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 177,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 173,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"tasknotes\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"taskName\",\n              children: /*#__PURE__*/_jsxDEV(\"b\", {\n                children: \"Task Notes\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 187,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 186,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n              rows: \"3\",\n              name: \"taskNotes\",\n              className: \"form-control\",\n              onChange: this.handleChange,\n              value: this.state.taskNotes\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 189,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 185,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            id: \"flexrow\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"taskstatus\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"taskStatus\",\n                children: /*#__PURE__*/_jsxDEV(\"b\", {\n                  children: \"Task Status\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 200,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 199,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                name: \"taskStatus\",\n                className: \"taskstatusselect\",\n                onChange: this.handleChange,\n                value: this.state.taskStatus,\n                children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"pending\",\n                  children: \"Pending\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 208,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"In Progress\",\n                  children: \"In progress\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 209,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"Completed\",\n                  children: \"Completed\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 210,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"Hold\",\n                  children: \"Hold\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 211,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 202,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 198,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"submitnewtask\",\n              children: /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"submit\",\n                name: \"add\",\n                id: \"addnewtask\",\n                value: \"Add\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 215,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 214,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 197,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tasklist\",\n        children: /*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"taskcards tasklisthead\",\n          style: {\n            height: \"50px\"\n          },\n          children: /*#__PURE__*/_jsxDEV(\"li\", {\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"taskcard\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"taskName\",\n                children: /*#__PURE__*/_jsxDEV(\"b\", {\n                  children: \"Task\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 231,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 230,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"taskNotes\",\n                children: /*#__PURE__*/_jsxDEV(\"b\", {\n                  children: \"Task Notes\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 234,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 233,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"assignedBy\",\n                children: /*#__PURE__*/_jsxDEV(\"b\", {\n                  children: \"Assigned By\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 237,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 236,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"taskStatus\",\n                children: /*#__PURE__*/_jsxDEV(\"b\", {\n                  children: \"Task Status\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 240,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 239,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 229,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 228,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tasklist\",\n        children: /*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"taskcards\",\n          children: taskList.map(task => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"taskcard\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"taskName\",\n                children: task.task\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 251,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"taskNotes\",\n                children: task.taskNotes\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 252,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"assignedBy\",\n                children: task.assignedBy\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 253,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"taskStatus\",\n                children: task.taskStatus\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 254,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 250,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"taskcontrols\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"edittasks\",\n                children: task.taskStatus !== \"Completed\" ? task.takenBy == this.state.assignedBy ? /*#__PURE__*/_jsxDEV(\"button\", {\n                  id: \"donebtn\",\n                  onClick: () => this.handleDone(task._id),\n                  children: \"Done\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 260,\n                  columnNumber: 25\n                }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n                  id: \"editbtn\",\n                  onClick: () => this.handleTake(task._id),\n                  children: \"Take\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 266,\n                  columnNumber: 24\n                }, this) : \" \"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 257,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"deletetasks\",\n                children: /*#__PURE__*/_jsxDEV(\"button\", {\n                  id: \"deletebtn\",\n                  onClick: () => this.handleDelete(task._id),\n                  children: \"Delete\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 275,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 274,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 256,\n              columnNumber: 17\n            }, this), task.takenBy && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"taken\",\n              children: [\"Taken By: \", task.takenBy]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 283,\n              columnNumber: 34\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 249,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Task;","map":{"version":3,"sources":["D:/6th sem/HCI/Co-act-main/Co-act-main/src/components/Task.js"],"names":["React","axios","deleteTask","NotificationContainer","NotificationManager","Task","Component","state","assignedBy","JSON","parse","localStorage","getItem","displayName","uid","id","cospaceName","task","taskNotes","taskStatus","taskList","compare","a","b","componentDidMountAsst","currentCospace","data","getTasks","datas","forEach","push","sort","setState","error","console","log","get","handleChange","event","target","name","value","handleSubmit","e","preventDefault","warning","post","then","res","success","catch","response","status","handleDelete","currentTask","originalTasks","filter","_id","info","handleTake","takenBy","patch","actor","handleDone","componentDidMount","render","height","map"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,QAA2B,2BAA3B;AACA,SACEC,qBADF,EAEEC,mBAFF,QAGO,qBAHP;;;AAKA,MAAMC,IAAN,SAAmBL,KAAK,CAACM,SAAzB,CAAmC;AAAA;AAAA;AAAA,SACjCC,KADiC,GACzB;AACNC,MAAAA,UAAU,EAAEC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAX,EAAyCC,WAD/C;AAENC,MAAAA,GAAG,EAAEL,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAX,EAAyCG,EAFxC;AAGNC,MAAAA,WAAW,EAAEL,YAAY,CAACC,OAAb,CAAqB,wBAArB,CAHP;AAINK,MAAAA,IAAI,EAAE,EAJA;AAKNC,MAAAA,SAAS,EAAE,EALL;AAMNC,MAAAA,UAAU,EAAE,SANN;AAONC,MAAAA,QAAQ,EAAE;AAPJ,KADyB;;AAAA,SAWjCC,OAXiC,GAWvB,CAACC,CAAD,EAAIC,CAAJ,KAAU;AAChB,UAAGD,CAAC,CAACH,UAAF,IAAgBI,CAAC,CAACJ,UAArB,EAAiC,OAAO,CAAP;AACjC,UAAGG,CAAC,CAACH,UAAF,IAAgB,WAAnB,EAAgC,OAAO,CAAP;AAChC,UAAGG,CAAC,CAACH,UAAF,IAAgB,SAAnB,EAA8B,OAAO,CAAC,CAAR;AAC9B,UAAGI,CAAC,CAACJ,UAAF,IAAgB,WAAnB,EAAgC,OAAO,CAAC,CAAR;AAChC,UAAGI,CAAC,CAACJ,UAAF,IAAgB,SAAnB,EAA8B,OAAO,CAAP;AAC9B,aAAO,CAAP;AACH,KAlBgC;;AAAA,SAoBjCK,qBApBiC,GAoBT,YAAY;AAClC,YAAMV,GAAG,GAAGL,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAX,EAAyCG,EAArD;AACA,YAAMU,cAAc,GAAGd,YAAY,CAACC,OAAb,CAAqB,wBAArB,CAAvB;;AACA,UAAI;AACF,cAAM;AAAEc,UAAAA;AAAF,YAAW,MAAM,KAAKC,QAAL,EAAvB;AACA,YAAIC,KAAK,GAAG,EAAZ;AACAF,QAAAA,IAAI,CAACG,OAAL,CAAcZ,IAAD,IAAU;AACrB,cAAIA,IAAI,CAACD,WAAL,KAAqBS,cAAzB,EAAyC;AACvCG,YAAAA,KAAK,CAACE,IAAN,CAAWb,IAAX;AACD;AACF,SAJD;AAKAW,QAAAA,KAAK,CAACG,IAAN,CAAW,KAAKV,OAAhB;AACA,aAAKW,QAAL,CAAc;AAAEZ,UAAAA,QAAQ,EAAEQ;AAAZ,SAAd;AACD,OAVD,CAUE,OAAOK,KAAP,EAAc;AACdC,QAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AACF,KApCgC;;AAAA,SAyCjCN,QAzCiC,GAyCtB,MAAM;AACf,aAAO1B,KAAK,CAACmC,GAAN,CAAU,4BAAV,CAAP;AACD,KA3CgC;;AAAA,SA4CjCC,YA5CiC,GA4CjBC,KAAD,IAAW;AACxB,UAAIA,KAAK,CAACC,MAAN,CAAaC,IAAb,KAAsB,YAA1B,EAAwC;AACtC,aAAKR,QAAL,CAAc;AACZb,UAAAA,UAAU,EAAEmB,KAAK,CAACC,MAAN,CAAaE;AADb,SAAd;AAGD,OAJD,MAIO;AACL,aAAKT,QAAL,CAAc;AACZ,WAACM,KAAK,CAACC,MAAN,CAAaC,IAAd,GAAqBF,KAAK,CAACC,MAAN,CAAaE;AADtB,SAAd;AAGD;AACF,KAtDgC;;AAAA,SAwDjCC,YAxDiC,GAwDjBC,CAAD,IAAO;AACpBA,MAAAA,CAAC,CAACC,cAAF;;AACA,UAAI,KAAKrC,KAAL,CAAWU,IAAX,KAAoB,EAApB,IAA0B,KAAKV,KAAL,CAAWW,SAAX,KAAyB,EAAvD,EAA2D;AACzDd,QAAAA,mBAAmB,CAACyC,OAApB,CACE,6EADF;AAGA,eAAO,KAAP;AACD;;AACD,UAAInB,IAAI,GAAG;AACTlB,QAAAA,UAAU,EAAE,KAAKD,KAAL,CAAWC,UADd;AAETM,QAAAA,GAAG,EAAE,KAAKP,KAAL,CAAWO,GAFP;AAGTG,QAAAA,IAAI,EAAE,KAAKV,KAAL,CAAWU,IAHR;AAITC,QAAAA,SAAS,EAAE,KAAKX,KAAL,CAAWW,SAJb;AAKTC,QAAAA,UAAU,EAAE,KAAKZ,KAAL,CAAWY,UALd;AAMTH,QAAAA,WAAW,EAAE,KAAKT,KAAL,CAAWS;AANf,OAAX;AASAf,MAAAA,KAAK,CACF6C,IADH,CACQ,gCADR,EAC0CpB,IAD1C,EAEGqB,IAFH,CAEQ,MAAOC,GAAP,IAAe;AACnB5C,QAAAA,mBAAmB,CAAC6C,OAApB,CAA4B,aAA5B;AACA,aAAK1C,KAAL,CAAWU,IAAX,GAAkB,EAAlB;AACA,aAAKV,KAAL,CAAWW,SAAX,GAAuB,EAAvB;AACA,aAAKX,KAAL,CAAWY,UAAX,GAAwB,SAAxB;AACA,aAAKK,qBAAL;AACD,OARH,EASG0B,KATH,CASUjB,KAAD,IAAW;AAChB,YAAIA,KAAK,CAACkB,QAAN,CAAeC,MAAf,IAAyBnB,KAAK,CAACkB,QAAN,CAAeC,MAAf,KAA0B,GAAvD,EACEhD,mBAAmB,CAAC6B,KAApB,CAA0B,aAA1B,EADF,KAEK7B,mBAAmB,CAAC6B,KAApB,CAA0B,sBAA1B;AACN,OAbH;AAcD,KAvFgC;;AAAA,SAyFjCoB,YAzFiC,GAyFlB,MAAOC,WAAP,IAAuB;AACpC,YAAMC,aAAa,GAAG,KAAKhD,KAAL,CAAWa,QAAjC;;AACA,UAAI;AACF,cAAMA,QAAQ,GAAGmC,aAAa,CAACC,MAAd,CAAsBvC,IAAD,IAAUA,IAAI,CAACwC,GAAL,KAAaH,WAA5C,CAAjB;AACA,aAAKtB,QAAL,CAAc;AAAEZ,UAAAA;AAAF,SAAd;AACA,cAAMlB,UAAU,CAACoD,WAAD,CAAhB;AACAlD,QAAAA,mBAAmB,CAACsD,IAApB,CAAyB,6BAAzB;AACD,OALD,CAKE,OAAOzB,KAAP,EAAc;AACd,aAAKD,QAAL,CAAc;AAAEZ,UAAAA,QAAQ,EAAEmC;AAAZ,SAAd;AACArB,QAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AACF,KApGgC;;AAAA,SAsGjC0B,UAtGiC,GAsGpB,MAAML,WAAN,IAAsB;AACjC,YAAMC,aAAa,GAAG,KAAKhD,KAAL,CAAWa,QAAjC;;AACA,UAAI;AACF,aAAI,IAAIH,IAAR,IAAgBsC,aAAhB,EAA8B;AAC1B,cAAGtC,IAAI,CAACwC,GAAL,KAAaH,WAAhB,EAA4B;AACxBrC,YAAAA,IAAI,CAAC2C,OAAL,GAAe,KAAKrD,KAAL,CAAWC,UAA1B;AACAS,YAAAA,IAAI,CAACE,UAAL,GAAkB,aAAlB;AACH;AACJ;;AACD,aAAKa,QAAL,CAAc;AAAEuB,UAAAA;AAAF,SAAd;AAEAtD,QAAAA,KAAK,CACJ4D,KADD,CACO,qCAAqCP,WAD5C,EACyD;AAACQ,UAAAA,KAAK,EAAE,KAAKvD,KAAL,CAAWC;AAAnB,SADzD,EAECuC,IAFD,CAEM,MAAM;AACR3C,UAAAA,mBAAmB,CAAC6C,OAApB,CAA4B,2BAA5B;AACH,SAJD,EAKCC,KALD,CAKO,MAAM;AACT9C,UAAAA,mBAAmB,CAACsD,IAApB,CAAyB,wBAAzB;AACH,SAPD;AAQD,OAjBD,CAiBE,OAAOzB,KAAP,EAAc;AACd,aAAKD,QAAL,CAAc;AAAEZ,UAAAA,QAAQ,EAAEmC;AAAZ,SAAd;AACArB,QAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AACF,KA7HgC;;AAAA,SA+HjC8B,UA/HiC,GA+HpB,MAAMT,WAAN,IAAsB;AACjC,YAAMC,aAAa,GAAG,KAAKhD,KAAL,CAAWa,QAAjC;;AACA,UAAI;AACF,aAAI,IAAIH,IAAR,IAAgBsC,aAAhB,EAA8B;AAC1B,cAAGtC,IAAI,CAACwC,GAAL,KAAaH,WAAhB,EAA4B;AACxBrC,YAAAA,IAAI,CAAC2C,OAAL,GAAe,KAAKrD,KAAL,CAAWC,UAA1B;AACAS,YAAAA,IAAI,CAACE,UAAL,GAAkB,WAAlB;AACH;AACJ;;AACD,aAAKa,QAAL,CAAc;AAAEuB,UAAAA;AAAF,SAAd;AAEAtD,QAAAA,KAAK,CACJ4D,KADD,CACO,qCAAqCP,WAD5C,EAECP,IAFD,CAEM,MAAM;AACR3C,UAAAA,mBAAmB,CAAC6C,OAApB,CAA4B,+BAA5B;AACH,SAJD,EAKCC,KALD,CAKO,MAAM;AACT9C,UAAAA,mBAAmB,CAACsD,IAApB,CAAyB,wBAAzB;AACH,SAPD;AAQD,OAjBD,CAiBE,OAAOzB,KAAP,EAAc;AACd,aAAKD,QAAL,CAAc;AAAEZ,UAAAA,QAAQ,EAAEmC;AAAZ,SAAd;AACArB,QAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AACF,KAtJgC;AAAA;;AAqCjC+B,EAAAA,iBAAiB,GAAG;AAClB,SAAKxC,qBAAL;AACD;;AAkHDyC,EAAAA,MAAM,GAAG;AACP,QAAI;AAAE7C,MAAAA;AAAF,QAAe,KAAKb,KAAxB;AACA,wBACE;AAAK,MAAA,SAAS,EAAC,aAAf;AAAA,8BACE;AAAK,QAAA,SAAS,EAAC,eAAf;AAA+B,QAAA,EAAE,EAAC,eAAlC;AAAA,+BACE,QAAC,qBAAD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cADF,eAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAJF,eAKE;AAAA,kBAAKI,YAAY,CAACC,OAAb,CAAqB,oCAArB;AAAL;AAAA;AAAA;AAAA;AAAA,cALF,eAME;AAAK,QAAA,SAAS,EAAC,YAAf;AAAA,+BACE;AAAM,UAAA,QAAQ,EAAE,KAAK8B,YAArB;AAAmC,UAAA,SAAS,EAAC,UAA7C;AAAA,kCACE;AAAK,YAAA,SAAS,EAAC,UAAf;AAAA,oCACE;AAAO,cAAA,OAAO,EAAC,UAAf;AAAA,qCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,oBADF,eAIE;AACE,cAAA,IAAI,EAAC,MADP;AAEE,cAAA,IAAI,EAAC,MAFP;AAGE,cAAA,SAAS,EAAC,UAHZ;AAIE,cAAA,QAAQ,EAAE,KAAKL,YAJjB;AAKE,cAAA,KAAK,EAAE,KAAK9B,KAAL,CAAWU;AALpB;AAAA;AAAA;AAAA;AAAA,oBAJF;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAaE;AAAK,YAAA,SAAS,EAAC,WAAf;AAAA,oCACE;AAAO,cAAA,OAAO,EAAC,UAAf;AAAA,qCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,oBADF,eAIE;AACE,cAAA,IAAI,EAAC,GADP;AAEE,cAAA,IAAI,EAAC,WAFP;AAGE,cAAA,SAAS,EAAC,cAHZ;AAIE,cAAA,QAAQ,EAAE,KAAKoB,YAJjB;AAKE,cAAA,KAAK,EAAE,KAAK9B,KAAL,CAAWW;AALpB;AAAA;AAAA;AAAA;AAAA,oBAJF;AAAA;AAAA;AAAA;AAAA;AAAA,kBAbF,eAyBE;AAAK,YAAA,EAAE,EAAC,SAAR;AAAA,oCACE;AAAK,cAAA,SAAS,EAAC,YAAf;AAAA,sCACE;AAAO,gBAAA,OAAO,EAAC,YAAf;AAAA,uCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,sBADF,eAIE;AACE,gBAAA,IAAI,EAAC,YADP;AAEE,gBAAA,SAAS,EAAC,kBAFZ;AAGE,gBAAA,QAAQ,EAAE,KAAKmB,YAHjB;AAIE,gBAAA,KAAK,EAAE,KAAK9B,KAAL,CAAWY,UAJpB;AAAA,wCAME;AAAQ,kBAAA,KAAK,EAAC,SAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBANF,eAOE;AAAQ,kBAAA,KAAK,EAAC,aAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAPF,eAQE;AAAQ,kBAAA,KAAK,EAAC,WAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBARF,eASE;AAAQ,kBAAA,KAAK,EAAC,MAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBATF;AAAA;AAAA;AAAA;AAAA;AAAA,sBAJF;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,eAiBE;AAAK,cAAA,SAAS,EAAC,eAAf;AAAA,qCACE;AACE,gBAAA,IAAI,EAAC,QADP;AAEE,gBAAA,IAAI,EAAC,KAFP;AAGE,gBAAA,EAAE,EAAC,YAHL;AAIE,gBAAA,KAAK,EAAC;AAJR;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,oBAjBF;AAAA;AAAA;AAAA;AAAA;AAAA,kBAzBF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cANF,eA6DE;AAAK,QAAA,SAAS,EAAC,UAAf;AAAA,+BACE;AAAI,UAAA,SAAS,EAAC,wBAAd;AAAuC,UAAA,KAAK,EAAE;AAAE+C,YAAAA,MAAM,EAAE;AAAV,WAA9C;AAAA,iCACE;AAAA,mCACE;AAAK,cAAA,SAAS,EAAC,UAAf;AAAA,sCACE;AAAK,gBAAA,SAAS,EAAC,UAAf;AAAA,uCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,sBADF,eAIE;AAAK,gBAAA,SAAS,EAAC,WAAf;AAAA,uCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,sBAJF,eAOE;AAAK,gBAAA,SAAS,EAAC,YAAf;AAAA,uCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,sBAPF,eAUE;AAAK,gBAAA,SAAS,EAAC,YAAf;AAAA,uCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,sBAVF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cA7DF,eAiFE;AAAK,QAAA,SAAS,EAAC,UAAf;AAAA,+BACE;AAAI,UAAA,SAAS,EAAC,WAAd;AAAA,oBACG9C,QAAQ,CAAC+C,GAAT,CAAclD,IAAD,iBACZ;AAAA,oCACE;AAAK,cAAA,SAAS,EAAC,UAAf;AAAA,sCACE;AAAK,gBAAA,SAAS,EAAC,UAAf;AAAA,0BAA2BA,IAAI,CAACA;AAAhC;AAAA;AAAA;AAAA;AAAA,sBADF,eAEE;AAAK,gBAAA,SAAS,EAAC,WAAf;AAAA,0BAA4BA,IAAI,CAACC;AAAjC;AAAA;AAAA;AAAA;AAAA,sBAFF,eAGE;AAAK,gBAAA,SAAS,EAAC,YAAf;AAAA,0BAA6BD,IAAI,CAACT;AAAlC;AAAA;AAAA;AAAA;AAAA,sBAHF,eAIE;AAAK,gBAAA,SAAS,EAAC,YAAf;AAAA,0BAA6BS,IAAI,CAACE;AAAlC;AAAA;AAAA;AAAA;AAAA,sBAJF;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,eAOE;AAAK,cAAA,SAAS,EAAC,cAAf;AAAA,sCACE;AAAK,gBAAA,SAAS,EAAC,WAAf;AAAA,0BACOF,IAAI,CAACE,UAAL,KAAoB,WAArB,GACAF,IAAI,CAAC2C,OAAL,IAAgB,KAAKrD,KAAL,CAAWC,UAA3B,gBACA;AACA,kBAAA,EAAE,EAAC,SADH;AAEA,kBAAA,OAAO,EAAE,MAAM,KAAKuD,UAAL,CAAgB9C,IAAI,CAACwC,GAArB,CAFf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADA,gBAOD;AACD,kBAAA,EAAE,EAAC,SADF;AAED,kBAAA,OAAO,EAAE,MAAM,KAAKE,UAAL,CAAgB1C,IAAI,CAACwC,GAArB,CAFd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBARC,GAcH;AAfH;AAAA;AAAA;AAAA;AAAA,sBADF,eAkBE;AAAK,gBAAA,SAAS,EAAC,aAAf;AAAA,uCACE;AACE,kBAAA,EAAE,EAAC,WADL;AAEE,kBAAA,OAAO,EAAE,MAAM,KAAKJ,YAAL,CAAkBpC,IAAI,CAACwC,GAAvB,CAFjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,sBAlBF;AAAA;AAAA;AAAA;AAAA;AAAA,oBAPF,EAkCGxC,IAAI,CAAC2C,OAAL,iBAAgB;AAAK,cAAA,SAAS,EAAC,OAAf;AAAA,uCAAkC3C,IAAI,CAAC2C,OAAvC;AAAA;AAAA;AAAA;AAAA;AAAA,oBAlCnB;AAAA;AAAA;AAAA;AAAA;AAAA,kBADD;AADH;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAjFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AA8HD;;AAzRgC;;AA4RnC,eAAevD,IAAf","sourcesContent":["import React from \"react\";\nimport axios from \"axios\";\nimport { deleteTask } from \"../services/taskServices1\";\nimport {\n  NotificationContainer,\n  NotificationManager,\n} from \"react-notifications\";\n\nclass Task extends React.Component {\n  state = {\n    assignedBy: JSON.parse(localStorage.getItem(\"user\")).displayName,\n    uid: JSON.parse(localStorage.getItem(\"user\")).id,\n    cospaceName: localStorage.getItem(\"recent_cospace_clicked\"),\n    task: \"\",\n    taskNotes: \"\",\n    taskStatus: \"Pending\",\n    taskList: [],\n  };\n\n  compare = (a, b) => {\n      if(a.taskStatus == b.taskStatus) return 0;\n      if(a.taskStatus == \"Completed\") return 1;\n      if(a.taskStatus == \"Pending\") return -1;\n      if(b.taskStatus == \"Completed\") return -1;\n      if(b.taskStatus == \"Pending\") return 1;\n      return 0;\n  }\n\n  componentDidMountAsst = async () => {\n    const uid = JSON.parse(localStorage.getItem(\"user\")).id;\n    const currentCospace = localStorage.getItem(\"recent_cospace_clicked\");\n    try {\n      const { data } = await this.getTasks();\n      let datas = [];\n      data.forEach((task) => {\n        if (task.cospaceName === currentCospace) {\n          datas.push(task);\n        }\n      });\n      datas.sort(this.compare);\n      this.setState({ taskList: datas });\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  componentDidMount() {\n    this.componentDidMountAsst();\n  }\n\n  getTasks = () => {\n    return axios.get(\"http://localhost:8000/task\");\n  };\n  handleChange = (event) => {\n    if (event.target.name === \"taskStatus\") {\n      this.setState({\n        taskStatus: event.target.value,\n      });\n    } else {\n      this.setState({\n        [event.target.name]: event.target.value,\n      });\n    }\n  };\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    if (this.state.task === \"\" || this.state.taskNotes === \"\") {\n      NotificationManager.warning(\n        \"Please Fill up Required Field. Please Check Task field And Task Notes field\"\n      );\n      return false;\n    }\n    let data = {\n      assignedBy: this.state.assignedBy,\n      uid: this.state.uid,\n      task: this.state.task,\n      taskNotes: this.state.taskNotes,\n      taskStatus: this.state.taskStatus,\n      cospaceName: this.state.cospaceName,\n    };\n\n    axios\n      .post(\"http://localhost:8000/task/add\", data)\n      .then(async (res) => {\n        NotificationManager.success(\"Task added!\");\n        this.state.task = \"\";\n        this.state.taskNotes = \"\";\n        this.state.taskStatus = \"Pending\";\n        this.componentDidMountAsst();\n      })\n      .catch((error) => {\n        if (error.response.status && error.response.status === 400)\n          NotificationManager.error(\"Bad Request\");\n        else NotificationManager.error(\"Something Went Wrong\");\n      });\n  };\n\n  handleDelete = async (currentTask) => {\n    const originalTasks = this.state.taskList;\n    try {\n      const taskList = originalTasks.filter((task) => task._id !== currentTask);\n      this.setState({ taskList });\n      await deleteTask(currentTask);\n      NotificationManager.info(\"Task deleted successfully!!\");\n    } catch (error) {\n      this.setState({ taskList: originalTasks });\n      console.log(error);\n    }\n  };\n\n  handleTake = async(currentTask) => {\n    const originalTasks = this.state.taskList;\n    try {\n      for(let task of originalTasks){\n          if(task._id === currentTask){\n              task.takenBy = this.state.assignedBy;\n              task.taskStatus = \"In Progress\";\n          }\n      }\n      this.setState({ originalTasks });\n\n      axios\n      .patch(\"http://localhost:8000/task/take/\" + currentTask, {actor: this.state.assignedBy})\n      .then(() => {\n          NotificationManager.success(\"Task taken successfully!!\");\n      })\n      .catch(() => {\n          NotificationManager.info(\"Something went wrong!!\");\n      })\n    } catch (error) {\n      this.setState({ taskList: originalTasks });\n      console.log(error);\n    }\n  }\n\n  handleDone = async(currentTask) => {\n    const originalTasks = this.state.taskList;\n    try {\n      for(let task of originalTasks){\n          if(task._id === currentTask){\n              task.takenBy = this.state.assignedBy;\n              task.taskStatus = \"Completed\";\n          }\n      }\n      this.setState({ originalTasks });\n\n      axios\n      .patch(\"http://localhost:8000/task/done/\" + currentTask)\n      .then(() => {\n          NotificationManager.success(\"Task Completed successfully!!\");\n      })\n      .catch(() => {\n          NotificationManager.info(\"Something went wrong!!\");\n      })\n    } catch (error) {\n      this.setState({ taskList: originalTasks });\n      console.log(error);\n    }\n  }\n\n\n  render() {\n    let { taskList } = this.state;\n    return (\n      <div className=\"tasksection\">\n        <div className=\"noticontainer\" id=\"noticontainer\">\n          <NotificationContainer />\n        </div>\n        <h1>Tasks</h1>\n        <h2>{localStorage.getItem(\"recent_cospace_clicked_description\")}</h2>\n        <div className=\"addnewtask\">\n          <form onSubmit={this.handleSubmit} className=\"taskform\">\n            <div className=\"taskname\">\n              <label htmlFor=\"taskName\">\n                <b>Task Name</b>\n              </label>\n              <input\n                type=\"text\"\n                name=\"task\"\n                className=\"taskname\"\n                onChange={this.handleChange}\n                value={this.state.task}\n              />\n            </div>\n            <div className=\"tasknotes\">\n              <label htmlFor=\"taskName\">\n                <b>Task Notes</b>\n              </label>\n              <textarea\n                rows=\"3\"\n                name=\"taskNotes\"\n                className=\"form-control\"\n                onChange={this.handleChange}\n                value={this.state.taskNotes}\n              ></textarea>\n            </div>\n            <div id=\"flexrow\">\n              <div className=\"taskstatus\">\n                <label htmlFor=\"taskStatus\">\n                  <b>Task Status</b>\n                </label>\n                <select\n                  name=\"taskStatus\"\n                  className=\"taskstatusselect\"\n                  onChange={this.handleChange}\n                  value={this.state.taskStatus}\n                >\n                  <option value=\"pending\">Pending</option>\n                  <option value=\"In Progress\">In progress</option>\n                  <option value=\"Completed\">Completed</option>\n                  <option value=\"Hold\">Hold</option>\n                </select>\n              </div>\n              <div className=\"submitnewtask\">\n                <input\n                  type=\"submit\"\n                  name=\"add\"\n                  id=\"addnewtask\"\n                  value=\"Add\"\n                ></input>\n              </div>\n            </div>\n          </form>\n        </div>\n\n        <div className=\"tasklist\">\n          <ul className=\"taskcards tasklisthead\" style={{ height: \"50px\" }}>\n            <li>\n              <div className=\"taskcard\">\n                <div className=\"taskName\">\n                  <b>Task</b>\n                </div>\n                <div className=\"taskNotes\">\n                  <b>Task Notes</b>\n                </div>\n                <div className=\"assignedBy\">\n                  <b>Assigned By</b>\n                </div>\n                <div className=\"taskStatus\">\n                  <b>Task Status</b>\n                </div>\n              </div>\n            </li>\n          </ul>\n        </div>\n        <div className=\"tasklist\">\n          <ul className=\"taskcards\">\n            {taskList.map((task) => (\n              <li>\n                <div className=\"taskcard\">\n                  <div className=\"taskName\">{task.task}</div>\n                  <div className=\"taskNotes\">{task.taskNotes}</div>\n                  <div className=\"assignedBy\">{task.assignedBy}</div>\n                  <div className=\"taskStatus\">{task.taskStatus}</div>\n                </div>\n                <div className=\"taskcontrols\">\n                  <div className=\"edittasks\">\n                    {   (task.taskStatus !== \"Completed\") ?\n                        task.takenBy == this.state.assignedBy?\n                        <button\n                        id=\"donebtn\"\n                        onClick={() => this.handleDone(task._id)}\n                        >\n                        Done\n                      </button>\n                     : <button\n                      id=\"editbtn\"\n                      onClick={() => this.handleTake(task._id)}\n                      >\n                      Take\n                    </button>\n                    :\" \"}\n                  </div>\n                  <div className=\"deletetasks\">\n                    <button\n                      id=\"deletebtn\"\n                      onClick={() => this.handleDelete(task._id)}\n                      >\n                      Delete\n                    </button>\n                  </div>\n                </div>\n                {task.takenBy && <div className=\"taken\">Taken By: {task.takenBy}</div>}\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Task;\n"]},"metadata":{},"sourceType":"module"}