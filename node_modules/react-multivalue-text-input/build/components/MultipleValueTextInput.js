"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

require("../styles/styles.css");

var _MultipleValueTextInputItem = _interopRequireDefault(require("./MultipleValueTextInputItem"));

var _excluded = ["placeholder", "label", "name", "deleteButton", "onItemAdded", "onItemDeleted", "className", "labelClassName", "charCodes", "values", "shouldAddOnBlur"];

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var propTypes = {
  /** Any values the input's collection should be prepopulated with. */
  values: _propTypes.default.arrayOf(_propTypes.default.string),

  /** Method which should be called when an item is added to the collection */
  onItemAdded: _propTypes.default.func.isRequired,

  /** Method which should be called when an item is removed from the collection */
  onItemDeleted: _propTypes.default.func.isRequired,

  /** Label to be attached to the input, if desired */
  label: _propTypes.default.string,

  /** Name attribute for the input */
  name: _propTypes.default.string.isRequired,

  /** Placeholder attribute for the input, if desired */
  placeholder: _propTypes.default.string,

  /** ASCII charcode for the keys which should
   * trigger an item to be added to the collection (defaults to comma (44) and Enter (13))
   */
  charCodes: _propTypes.default.arrayOf(_propTypes.default.number),

  /** JSX or string which will be used as the control to delete an item from the collection */
  deleteButton: _propTypes.default.node,

  /** Whether or not the blur event should trigger the added-item handler */
  shouldAddOnBlur: _propTypes.default.bool,

  /** Custom class name for the input element */
  className: _propTypes.default.string,

  /** Custom class name for the input label element */
  labelClassName: _propTypes.default.string
};
var defaultProps = {
  placeholder: '',
  charCodes: [13, 44],
  deleteButton: /*#__PURE__*/_react.default.createElement("span", null, "\xD7"),
  values: [],
  label: '',
  shouldAddOnBlur: false,
  className: '',
  labelClassName: ''
};
/**
 * A text input component for React which maintains and displays a collection
 * of entered values as an array of strings.
 */

var MultipleValueTextInput = function MultipleValueTextInput(_ref) {
  var placeholder = _ref.placeholder,
      label = _ref.label,
      name = _ref.name,
      deleteButton = _ref.deleteButton,
      onItemAdded = _ref.onItemAdded,
      onItemDeleted = _ref.onItemDeleted,
      className = _ref.className,
      labelClassName = _ref.labelClassName,
      charCodes = _ref.charCodes,
      initialValues = _ref.values,
      shouldAddOnBlur = _ref.shouldAddOnBlur,
      forwardedProps = _objectWithoutProperties(_ref, _excluded);

  var _useState = (0, _react.useState)(initialValues),
      _useState2 = _slicedToArray(_useState, 2),
      values = _useState2[0],
      setValues = _useState2[1];

  var _useState3 = (0, _react.useState)(''),
      _useState4 = _slicedToArray(_useState3, 2),
      value = _useState4[0],
      setValue = _useState4[1];

  var handleValueChange = function handleValueChange(e) {
    setValue(e.target.value);
  };

  var handleItemAdd = function handleItemAdd(addedValue) {
    if (values.includes(addedValue) || !addedValue) {
      setValue('');
      return;
    }

    var newValues = values.concat(addedValue);
    setValues(newValues);
    setValue('');
    onItemAdded(value, newValues);
  };

  var handleItemRemove = function handleItemRemove(removedValue) {
    var currentValues = values;
    var newValues = currentValues.filter(function (v) {
      return v !== removedValue;
    });
    onItemDeleted(removedValue, newValues);
    setValues(newValues);
  };

  var handleKeypress = function handleKeypress(e) {
    // 13: Enter, 44: Comma
    if (charCodes.includes(e.charCode)) {
      e.preventDefault();
      handleItemAdd(e.target.value, onItemAdded);
    }
  };

  var handleBlur = function handleBlur(e) {
    // 13: Enter, 44: Comma
    if (shouldAddOnBlur) {
      e.preventDefault();
      handleItemAdd(e.target.value, onItemAdded);
    }
  };

  var valueDisplays = values.map(function (v) {
    return /*#__PURE__*/_react.default.createElement(_MultipleValueTextInputItem.default, {
      value: v,
      key: v,
      deleteButton: deleteButton,
      handleItemRemove: handleItemRemove
    });
  });
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "multiple-value-text-input",
    role: "form"
  }, /*#__PURE__*/_react.default.createElement("label", {
    htmlFor: name,
    className: labelClassName,
    "data-testid": "label"
  }, label, /*#__PURE__*/_react.default.createElement("div", {
    className: "multiple-value-text-input-item-container"
  }, values.length > 0 && /*#__PURE__*/_react.default.createElement("p", {
    role: "list"
  }, valueDisplays)), /*#__PURE__*/_react.default.createElement("input", _extends({
    "aria-label": label,
    name: name,
    placeholder: placeholder,
    value: value,
    type: "text",
    onKeyPress: handleKeypress,
    onChange: handleValueChange,
    onBlur: handleBlur,
    className: className
  }, forwardedProps))));
};

MultipleValueTextInput.propTypes = propTypes;
MultipleValueTextInput.defaultProps = defaultProps;
var _default = MultipleValueTextInput;
exports.default = _default;